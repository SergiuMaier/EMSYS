
Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095d  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b0  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c1  00000000  00000000  00001355  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	02 d0       	rcall	.+4      	; 0x7a <main>
  76:	48 c0       	rjmp	.+144    	; 0x108 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <main>:
#include "main_func.h"

int main(void)
{
	// LED0-output port (toggle led) / LED1-output port (button pressed led) / BUTTON1-input port (button)
	init_devices();
  7a:	44 d0       	rcall	.+136    	; 0x104 <init_devices>
	
	do
	{
		// toggle pin
		pinToggle(&LED0_PORT, LED0_PIN);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	85 e2       	ldi	r24, 0x25	; 37
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	15 d0       	rcall	.+42     	; 0xae <pinToggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	87 ea       	ldi	r24, 0xA7	; 167
  88:	91 e6       	ldi	r25, 0x61	; 97
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x10>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x1a>
  94:	00 00       	nop
		// long time delay - 2 seconds
		_delay_ms(2000);		
		
		// read button state. When the button is pressed -> set LED1. When the button is not pressed -> reset LED1.
		if ( (PIND & (1 << BUTTON1_PIN)) == 0x00 ) 
  96:	4a 99       	sbic	0x09, 2	; 9
  98:	05 c0       	rjmp	.+10     	; 0xa4 <main+0x2a>
		{
			// pin is high
			setPin(&LED1_PORT, LED1_PIN);
  9a:	62 e0       	ldi	r22, 0x02	; 2
  9c:	85 e2       	ldi	r24, 0x25	; 37
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	12 d0       	rcall	.+36     	; 0xc6 <setPin>
  a2:	ec cf       	rjmp	.-40     	; 0x7c <main+0x2>
		} else 
		{
			// pin is low
			resetPin(&LED1_PORT, LED1_PIN);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	85 e2       	ldi	r24, 0x25	; 37
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	19 d0       	rcall	.+50     	; 0xde <resetPin>
  ac:	e7 cf       	rjmp	.-50     	; 0x7c <main+0x2>

000000ae <pinToggle>:
 *  @param[in]   pin: the pin which will be toggled.
 *  @return      none.
 */
void pinToggle(volatile uint8_t *port, uint8_t pin)
{
	*port ^=  1 << pin;
  ae:	fc 01       	movw	r30, r24
  b0:	40 81       	ld	r20, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <pinToggle+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <pinToggle+0xa>
  c0:	24 27       	eor	r18, r20
  c2:	20 83       	st	Z, r18
  c4:	08 95       	ret

000000c6 <setPin>:
 *  @param[in]   pin: the pin which will be configured.
 *  @return      none.
 */
void setPin(volatile uint8_t *port, uint8_t pin)
{
	*port |=  1 << pin;
  c6:	fc 01       	movw	r30, r24
  c8:	40 81       	ld	r20, Z
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <setPin+0xe>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <setPin+0xa>
  d8:	24 2b       	or	r18, r20
  da:	20 83       	st	Z, r18
  dc:	08 95       	ret

000000de <resetPin>:
 *  @param[in]   port: the port whose pin value is to be configured.
 *  @param[in]   pin: the pin which will be configured.
 *  @return      none.
 */
void resetPin(volatile uint8_t *port, uint8_t pin)
{
  de:	fc 01       	movw	r30, r24
	*port &=  ~(1 << pin);
  e0:	90 81       	ld	r25, Z
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <resetPin+0xe>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <resetPin+0xa>
  f0:	20 95       	com	r18
  f2:	29 23       	and	r18, r25
  f4:	20 83       	st	Z, r18
  f6:	08 95       	ret

000000f8 <port_init>:
 *  @return      none.
 */
void port_init(void)
{
	// Output port
	DDRB  = 0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	84 b9       	out	0x04, r24	; 4
	PORTB  = 0x00;
  fc:	15 b8       	out	0x05, r1	; 5
	
	// Input port
	DDRD  = 0x00;
  fe:	1a b8       	out	0x0a, r1	; 10
	PORTD  = 0xFF;
 100:	8b b9       	out	0x0b, r24	; 11
 102:	08 95       	ret

00000104 <init_devices>:
/*  @brief       Init MCU peripherals and any devices connected to the MCU.
 *  @return      none.
 */
void init_devices(void)
{
	port_init();
 104:	f9 cf       	rjmp	.-14     	; 0xf8 <port_init>
 106:	08 95       	ret

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
